import numpy as np
from random import shuffle

def softmax_loss_naive(W, X, y, reg):
  """
  Softmax loss function, naive implementation (with loops)

  Inputs have dimension D, there are C classes, and we operate on minibatches
  of N examples.

  Inputs:
  - W: A numpy array of shape (D, C) containing weights.
  - X: A numpy array of shape (N, D) containing a minibatch of data.
  - y: A numpy array of shape (N,) containing training labels; y[i] = c means
    that X[i] has label c, where 0 <= c < C.
  - reg: (float) regularization strength

  Returns a tuple of:
  - loss as single float
  - gradient with respect to weights W; an array of same shape as W
  """
  # Initialize the loss and gradient to zero.
  loss = 0.0
  dW = np.zeros_like(W)

  #############################################################################
  # TODO: Compute the softmax loss and its gradient using explicit loops.     #
  # Store the loss in loss and the gradient in dW. If you are not careful     #
  # here, it is easy to run into numeric instability. Don't forget the        #
  # regularization!                                                           #
  #############################################################################
  num_train = X.shape[0]
  num_classes = W.shape[1]
  for i in xrange(num_train):
    prob = X[i].dot(W) # Unnormalized probability (1, C)
    prob -= np.max(prob) #Handle instability
    prob = np.exp(prob)
    prob /= np.sum(prob) #Normalized
    loss += -np.log(prob[y[i]]) # Gives a single value
    grad = prob
    grad[y[i]] -= 1
    for j in range(num_classes):
        dW[:, j] += grad[j] * X[i].transpose()
  loss /= num_train
  loss += 0.5*reg*np.sum(W * W)
  dW /= num_train
  dW += reg * W
  #############################################################################
  #                          END OF YOUR CODE                                 #
  #############################################################################

  return loss, dW


def softmax_loss_vectorized(W, X, y, reg):
  """
  Softmax loss function, vectorized version.

  Inputs and outputs are the same as softmax_loss_naive.
  """
  # Initialize the loss and gradient to zero.
  loss = 0.0
  dW = np.zeros_like(W)

  #############################################################################
  # TODO: Compute the softmax loss and its gradient using no explicit loops.  #
  # Store the loss in loss and the gradient in dW. If you are not careful     #
  # here, it is easy to run into numeric instability. Don't forget the        #
  # regularization!                                                           #
  #############################################################################
  num_train = X.shape[0]
  prob = X.dot(W) # (N x C)
  prob -= np.max(prob, axis=1).reshape(prob.shape[0], 1)
  prob = np.exp(prob)
  prob /= np.sum(prob, axis=1).reshape(prob.shape[0], 1)
  loss = (-1.0 / num_train) * np.sum(np.log(prob[np.arange(num_train), y])) + 0.5*reg*np.sum(W * W)
  prob[np.arange(num_train), y] -= 1
  dW = X.transpose().dot(prob) * (1 / ) + reg * W
  #############################################################################
  #                          END OF YOUR CODE                                 #
  #############################################################################

  return loss, dW

